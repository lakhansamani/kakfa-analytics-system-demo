// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Context struct {
	IP        *string `json:"ip"`
	Locale    *string `json:"locale"`
	UserAgent *string `json:"userAgent"`
	Page      *Page   `json:"page"`
}

type Event struct {
	ID         string     `json:"id"`
	EventType  *EventType `json:"eventType"`
	EventClass *string    `json:"eventClass"`
	Context    *Context   `json:"context"`
	CreatedAt  *string    `json:"createdAt"`
	UpdatedAt  *string    `json:"updatedAt"`
	UserID     *string    `json:"userId"`
}

type Page struct {
	Path     *string `json:"path"`
	Referrer *string `json:"referrer"`
	Search   *string `json:"search"`
	Title    *string `json:"title"`
	URL      *string `json:"url"`
}

type PingResponse struct {
	Message string `json:"message"`
}

type RegisterKafkaEventInput struct {
	EventClass      string    `json:"eventClass"`
	EventType       EventType `json:"eventType"`
	UserID          string    `json:"userId"`
	MessageID       *string   `json:"messageId"`
	Path            string    `json:"path"`
	URL             string    `json:"url"`
	Locale          string    `json:"locale"`
	PageTitle       string    `json:"pageTitle"`
	PageSearchParam *string   `json:"pageSearchParam"`
}

type EventType string

const (
	EventTypePageView EventType = "PAGE_VIEW"
)

var AllEventType = []EventType{
	EventTypePageView,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypePageView:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
